using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class Player : MonoBehaviour
{
    public GameManager gameManager;
    public AchievementManager achievementManager;
    public SaveManager saveManager;
    public GameObject flames;
    public GameObject warningText;

    // sound stuff
    public AudioClip[] soundClips;
    public float minPitch = 0.9f;
    public float maxPitch = 1.1f;
    private AudioSource audioSource;
    private AudioSource audioSource2;
    private AudioSource audioSource3;

    private float screenTop;
    private float screenBottom;

    public int score;
    public bool isAlive = true;
    public bool isPaused = false;

    //player object components
    public Sprite[] sprites;
    private int spriteIndex;
    public SpriteRenderer spriteRenderer;
    private Rigidbody2D rb;
    private Color originalColor;

    //basic info for player physics
    public Vector3 direction;
    public float health = 1f;
    public int lives = 1;
    public int currentLives;
    public float gravity = -9.8f;
    public float startHeight = 20f;
    public bool playerCollisionEnabled = true;

    //elastic scaling animation
    public float scaleDuration = 0.33f;
    public float maxElasticAmplitude = 0.15f;
    public float elasticFrequency = 1.5f;
    public float delayBetweenAxes = 0.13f;

    //bounce on collision
    public float bounceForce = 10f;
    public float bounceForceEnemy = 4f;
    public float bounceForceDown = 5f;

    //Jump Strength
    public float strength = 1f;
    public float maxFallSpeed = 200f;

    //rotation as the player goes up and down
    public float leanAngle = 30f;
    public Quaternion targetRotation;
    private Vector3 previousPosition;
    private float velocity;
    public float rotationSpeedUpwards = 10f;
    public float rotationSpeedDownwards = 2f;

    //skin selection
    public int defaultSkinIndex = 0;
    public GameObject[] skinObjects;
    public int selectedSkin = 0;
    public List<int> unlockedSkins = new List<int>();

    public Text skinName;

    //voidsoul damage counter
    public int collectedGoldenCombs = 0;
    public VoidSoul voidSoul;

    //player damage information for the coroutine
    public float invincibilityTime = 1.0f;
    public bool isInvincible = false;

    //achievement variables
    public float lavaBounceCount;
    public float lightSpeedAchievementCount;
    public float goldenCombCounter;
    public float voidDefeatCounter;


    private void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();

        rb = GetComponent<Rigidbody2D>();

        selectedSkin = 0;

        gravity = 0f;

        health = 1f;

        flames.SetActive(false);

        isAlive = true;

        audioSource = GetComponents<AudioSource>()[0];
        audioSource2 = GetComponents<AudioSource>()[1];
        audioSource3 = GetComponents<AudioSource>()[2];
    }

    private void Start()
    {
        EnableSelectedSkin();

        previousPosition = transform.position;
        targetRotation = transform.rotation;

        StartCoroutine(AnimatedScaling());

        InvokeRepeating(nameof(AnimateSprite), 0.1f, 0.1f);

        screenTop = Camera.main.ViewportToWorldPoint(new Vector3(0.5f, 1f, 0f)).y;
        screenBottom = Camera.main.ViewportToWorldPoint(new Vector3(0.5f, 0f, 0f)).y;

        //originalColor = Vector3.zero;
    }

    private void OnEnable()
    {
        Vector3 position = transform.position;

        position.y = startHeight;

        transform.position = position;

        direction = Vector3.zero;

        InvokeRepeating(nameof(AnimateSprite), 0.1f, 0.1f);

        playerCollisionEnabled = true;
    }

    private void Update()
    {
        if (isPaused)
        {
            // Do nothing if the game is paused
            return;
        }

        //Thank god for guides - rotation behavior here
        if (Time.timeScale != 0)
        {
            Vector3 currentVelocity = (transform.position - previousPosition) / Time.deltaTime;
            previousPosition = transform.position;

            float leanAmount = Mathf.Clamp(currentVelocity.y, -1f, 1f); // Clamping the y velocity between -1 and 1
            float leanRotation = leanAmount * leanAngle;

            Quaternion targetLeanRotation = Quaternion.Euler(0f, 0f, leanRotation);

            float rotationSpeed = (currentVelocity.y >= 0f) ? rotationSpeedUpwards : rotationSpeedDownwards;
            targetRotation = Quaternion.Lerp(targetRotation, targetLeanRotation, rotationSpeed * Time.deltaTime);

            transform.rotation = targetRotation;
        }

        // this makes the player fall
        direction.y += gravity * Time.deltaTime;
        transform.position += direction * Time.deltaTime;

        // || isAlive && Input.GetMouseButtonDown(0)
        if (isAlive && !isPaused)
        {
            if (Input.GetKeyDown(KeyCode.Space) || (Input.GetMouseButtonDown(0)))
            {
                if (GameManager.unlimitedJumpHeight || transform.position.y < 40f)
                {
                    Jump();
                }
            }
        }
    }

    public void SetToPaused()
    {
        isPaused = true;
    }

    private void Jump()
    {
        direction = Vector2.up * strength;
    }

    private Vector3 CheckScale()
    {

        if (health == 1)
            return new Vector3(1.4f, 1.4f, 1.0f);
        else if (health == 2)
            return new Vector3(1.1f, 1.1f, 1.0f);
        else if (health == 3)
            return new Vector3(0.9f, 0.9f, 1.0f);
        else if (health == -1)
            return new Vector3(0.0f, 0.0f, 0.0f);
        else
            return transform.localScale; //default to the current scale.
    }

    public IEnumerator AnimatedScaling()
    {
        Vector3 currentScale = transform.localScale; //get current scale.

        Vector3 targetScale = CheckScale();

        //yield return new WaitForSeconds(delayBetweenAxes);

        float startTimeY = Time.time;
        float startTimeX = Time.time;

        while (Time.time - startTimeY < scaleDuration)
        {
            float t = (Time.time - startTimeY) / scaleDuration;

            //apply the elastic animation effect using a sine wave.
            float elasticOffset = Mathf.Sin(t * elasticFrequency * 2 * Mathf.PI) * maxElasticAmplitude;

            //scale both the y and x axes with elastic effect.
            float scaledY = Mathf.Lerp(currentScale.y, targetScale.y, t) + elasticOffset;
            float scaledX = Mathf.Lerp(currentScale.x, targetScale.x, t) + elasticOffset;

            transform.localScale = new Vector3(scaledX, scaledY, currentScale.z);

            yield return null;
        }

        //this line important to actually set scale to values
        transform.localScale = targetScale;
    }

    private void AnimateSprite()
    {
        spriteIndex++;

        if (spriteIndex >= sprites.Length)
        {
            spriteIndex = 0;
        }

        spriteRenderer.sprite = sprites[spriteIndex];
    }

    private void ContinueScreen()
    {
        saveManager.SaveGameData();
        gameManager.ContinueScreen();
    }

    private void GameOverScreen()
    {
        saveManager.SaveGameData();
        gameManager.GameOver();
    }

    public IEnumerator PlayerDamaged()
    {
        health--;

        if (health == 2 )
        {
            HealthDecreaseAudio();
        }

        else if (health == 1 )
        {
            HealthDecreaseAudio2();
        }

        StartCoroutine(AnimatedScaling());

        if (health <= 0 && lives <= 1)
        {
            isAlive = false;

            flames.SetActive(true);
            flames.GetComponent<flames>().StartCoroutine(flames.GetComponent<flames>().AnimatedScaling());

            GameOverScreen();

            health = -1;
            StartCoroutine(AnimatedScaling());
        }
        else if (health <= 0)
        {
            isAlive = false;

            flames.SetActive(true);
            flames.GetComponent<flames>().StartCoroutine(flames.GetComponent<flames>().AnimatedScaling());

            lives--;

            ContinueScreen();
        }

        StartCoroutine(InvulnerabilityFrames());

        yield return null;
    }

    public IEnumerator InvulnerabilityFrames()
    {
        isInvincible = true;

        yield return new WaitForSeconds(invincibilityTime);

        isInvincible = false;
    }

    public void PlayerPollenAudio()
    {
        audioSource.clip = soundClips[0];

        float randomPitch = UnityEngine.Random.Range(minPitch, maxPitch);
        audioSource.pitch = randomPitch;

        audioSource.Play();
    }

    public void PlayerFlapAudio()
    {
        audioSource.clip = soundClips[4];

        float randomPitch = UnityEngine.Random.Range(minPitch, maxPitch);
        audioSource.pitch = randomPitch;

        audioSource.Play();
    }

    public void HealthIncreaseAudio()
    {
        audioSource3.clip = soundClips[7];

        audioSource3.Play();
    }

    public void HealthIncreaseAudio2()
    {
        audioSource3.clip = soundClips[8];

        audioSource3.Play();
    }

    public void HealthDecreaseAudio()
    {
        audioSource3.clip = soundClips[6];

        audioSource3.Play();
    }

    public void HealthDecreaseAudio2()
    {
        audioSource3.clip = soundClips[9];

        audioSource3.Play();
    }

    public void BonkAudio()
    {
        audioSource2.clip = soundClips[10];

        float randomPitch = UnityEngine.Random.Range(minPitch, maxPitch);
        audioSource2.pitch = randomPitch;

        audioSource2.Play();
    }

    public void SteamAudio()
    {
        audioSource2.clip = soundClips[11];

        float randomPitch = UnityEngine.Random.Range(0.8f, 1.2f);
        audioSource2.pitch = randomPitch;

        audioSource2.Play();
    }

    public void BoingAudio()
    {
        audioSource2.clip = soundClips[12];

        float randomPitch = UnityEngine.Random.Range(0.7f, 1.7f);
        audioSource2.pitch = randomPitch;

        audioSource2.Play();
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        //Player NEEDS to be alive for these to trigger
        if (playerCollisionEnabled && isAlive == true)
        {
            if (other.gameObject.tag == "Obstacle" && isInvincible == false)
            {
                StartCoroutine(PlayerDamaged());
                BonkAudio();
            }

            else if (other.gameObject.tag == "goldenComb")
            {
                goldenCombCounter++;

                if (health == 1)
                {
                    health++;

                    HealthIncreaseAudio();

                    collectedGoldenCombs++;
                    StartCoroutine(AnimatedScaling());
                }

                else if (health == 2)
                {
                    health++;

                    HealthIncreaseAudio2();

                    collectedGoldenCombs++;
                    StartCoroutine(AnimatedScaling());
                }

                else if (health == 3)
                {
                    gameManager.score++;
                    gameManager.scoreText.text = gameManager.score.ToString();
                    HealthIncreaseAudio2();
                }

                if (gameManager.selectedLevel == 7)
                {
                    voidSoul.PushBack();
                }

                achievementManager.CheckAchievement();
            }

            else if (other.gameObject.tag == "pollen")
            {
                gameManager.score++;
                gameManager.scoreText.text = gameManager.score.ToString();

                PlayerPollenAudio();

                achievementManager.CheckAchievement();
            }

            else if (other.gameObject.CompareTag("bonk"))
            {
                direction.y = (bounceForce * 3);
                BoingAudio();
            }

            else if (other.gameObject.CompareTag("lava"))
            {
                SteamAudio();

                if (!isInvincible)
                {
                    flames.SetActive(true);

                    flames.GetComponent<flames>().StartCoroutine(flames.GetComponent<flames>().AnimatedScaling());

                    direction.y = (bounceForce * 4);

                    flames.GetComponent<flames>().StartCoroutine(flames.GetComponent<flames>().AnimatedShrink());

                    lavaBounceCount++;

                    StartCoroutine(PlayerDamaged());

                    achievementManager.CheckAchievement();
                }

                else if (isInvincible == true)
                {
                    direction.y = (bounceForce * 4);
                }
            }

            else if (other.gameObject.CompareTag("Enemy"))
            {
                Vector2 direction = other.transform.position - transform.position;
                float angle = Vector2.Angle(direction, Vector2.up);

                if (angle >= 115f)
                {
                    gameManager.increaseScore();
                    Jump();
                }

                else if (!isInvincible)
                {
                    StartCoroutine(PlayerDamaged());
                    BonkAudio();
                }
            }

            else if (other.CompareTag("VoidBeast"))
            {
                if (voidSoul.isDefeated == false)
                {
                    health = 0;
                    VoidGameOver();
                }

                if (achievementManager.nowWeAreOneAchievement == false && voidDefeatCounter >= 3)
                {
                    achievementManager.ShowAchievementToast("Now We Are One");
                    achievementManager.nowWeAreOneAchievement = true;
                    achievementManager.CheckAchievement();
                    achievementManager.PlayAnimateSkinToast();
                }
            }

            else if (other.CompareTag("TeleportRoof"))
            {
                transform.position = new Vector3(other.transform.position.x, screenBottom, transform.position.z);
            }

            else if (other.CompareTag("TeleportFloor"))
            {
                transform.position = new Vector3(other.transform.position.x, screenTop, transform.position.z);

                lightSpeedAchievementCount++;
                achievementManager.CheckAchievement();
            }

            if (other.CompareTag("Icarus") && achievementManager.envyOfIcarusAchievement == false)
            {
                achievementManager.ShowAchievementToast("The Envy Of Icarus");
                achievementManager.envyOfIcarusAchievement = true;
                achievementManager.CheckAchievement();
                achievementManager.PlayAnimateSkinToast();
            }
        }

        //player does NOT need to be alive
        else if (playerCollisionEnabled)
        {

            if (other.gameObject.CompareTag("bonk"))
            {
                direction.y = (bounceForce);
            }

            else if (other.gameObject.CompareTag("bonkRoof"))
            {
                direction.y -= (bounceForceDown);
            }

            else if (other.CompareTag("TeleportRoof"))
            {
                transform.position = new Vector3(other.transform.position.x, screenBottom, transform.position.z);
            }

            else if (other.CompareTag("TeleportFloor"))
            {
                transform.position = new Vector3(other.transform.position.x, screenTop, transform.position.z);
            }

            else if (other.gameObject.CompareTag("lava"))
            {
                direction.y = (bounceForce * 4);
            }

        }
    }

    public void VoidGameOver()
    {
        isAlive = false;
        health = -1;
        gravity = 0;

        voidDefeatCounter++;

        direction = Vector3.zero;

        gameManager.mainMenuButton.SetActive(true);
        gameManager.pauseButton.SetActive(false);

        StartCoroutine(AnimatedScaling());
    }

    public int GetCollectedGoldenCombs()
    {
        return collectedGoldenCombs;
    }

    public void ResetSkin()
    {
        selectedSkin = 0;
        EnableSelectedSkin();
    }

    // enables the current skin based on the value of skinObjects
    public void EnableSelectedSkin()
    {
        GameObject selectedSkinObject = skinObjects[unlockedSkins[selectedSkin]];

        if (selectedSkin >= 0 && selectedSkin < unlockedSkins.Count && unlockedSkins[selectedSkin] < skinObjects.Length)
        {
            int skinIndex = unlockedSkins[selectedSkin];

            for (int i = 0; i < skinObjects.Length; i++)
            {
                skinObjects[i].SetActive(i == skinIndex);
            }

            if (skinName != null)
            {
                skinName.text = selectedSkinObject.name;
            }
        }

        //demo mode
/*        if (selectedSkin > 2)
        {
            warningText.SetActive(true);
        }
        else
        {
            warningText.SetActive(false);
        }*/

        //saveManager.SaveGameData();
    }

    public void CheatUnlockSkins()
    {
        UnlockSkin(1);
        UnlockSkin(2);
        UnlockSkin(3);
        UnlockSkin(4);
        UnlockSkin(5);
        UnlockSkin(6);
        UnlockSkin(7);
        UnlockSkin(8);
        UnlockSkin(9);
        UnlockSkin(10);
        UnlockSkin(11);
        UnlockSkin(12);
        UnlockSkin(13);
        UnlockSkin(14);
        UnlockSkin(15);
        UnlockSkin(16);

        OrganizeUnlockedSkins();
    }

    public void AddCowboyAchievement()
    {
        achievementManager.aBakerBuzzingAchievement = true;
    }

    //unlocks skins based on earned achievements
    public void CheckAndUnlockSkins()
    {
        UnlockSkin(0);

        if (achievementManager.aBakerBuzzingAchievement)
        {
            UnlockSkin(1); // Cowbee
        }

        if (achievementManager.envyOfIcarusAchievement)
        {
            UnlockSkin(2); // Angel bee
        }

        if (achievementManager.beelzebubAchieve)
        {
            UnlockSkin(3); // Beelzebub
        }

        if (achievementManager.spaceLordAchievement)
        {
            UnlockSkin(4); // Dark Sprite
        }

        if (achievementManager.AstronautAchievement)
        {
            UnlockSkin(5); // Purple Sprite
        }

        if (achievementManager.fromHecksHeartAchievement)
        {
            UnlockSkin(6); // Bat Bee
        }

        if (achievementManager.surplusMoneyAchievement)
        {
            UnlockSkin(7); // BEO
        }

        if (achievementManager.honeyColdOutsideAchievement)
        {
            UnlockSkin(8); // Winterized
        }

        if (achievementManager.winterComing)
        {
            UnlockSkin(9); // Frost
        }

        if (achievementManager.combsAchievement4)
        {
            UnlockSkin(10); // Golden
        }

        if (achievementManager.grassMasterAchievement)
        {
            UnlockSkin(11); // Monkee
        }

        if (achievementManager.combsAchievement2)
        {
            UnlockSkin(12); // Princess
        }

        if (achievementManager.didntExpectGetThisFarAchievement)
        {
            UnlockSkin(13); // Queen Beelizabeth
        }

        if (achievementManager.eepy)
        {
            UnlockSkin(14); // Sleepbee
        }

        if (achievementManager.canFlyTwiceAsHighAchievement)
        {
            UnlockSkin(15); // Sunglasses
        }

        if (achievementManager.nowWeAreOneAchievement)
        {
            UnlockSkin(16); // Void Beest
        }

        OrganizeUnlockedSkins();
    }

    //supposed to add the unlocked skin to the unlockedSkins array
    public void UnlockSkin(int skinIndex)
    {
        if (skinIndex >= 0 && skinIndex < skinObjects.Length)
        {
            if (!unlockedSkins.Contains(skinIndex))
            {
                unlockedSkins.Add(skinIndex);
            }
        }
    }

    public void SkinScrollLeft()
    {
        if (unlockedSkins.Count > 0)
        {
            selectedSkin = (selectedSkin - 1 + unlockedSkins.Count) % unlockedSkins.Count;
            EnableSelectedSkin();
        }
    }

    // scrolls forwards through skin list
    public void SkinScrollRight()
    {
        if (unlockedSkins.Count > 0)
        {
            selectedSkin = (selectedSkin + 1) % unlockedSkins.Count;
            EnableSelectedSkin();
        }
    }

    // scrolls through the skin objects in the unlockedSkins array and enables the selected skin
    public void ChangeSelectedSkin(int increment)
    {
        if (unlockedSkins.Count > 0)
        {
            selectedSkin = (selectedSkin + increment + unlockedSkins.Count) % unlockedSkins.Count;
            EnableSelectedSkin();
        }
    }

    public void OrganizeUnlockedSkins()
    {
        unlockedSkins.Sort((a, b) => Array.IndexOf(skinObjects, skinObjects[a]).CompareTo(Array.IndexOf(skinObjects, skinObjects[b])));
    }

}
